//---------------------------------------------------------
// Removes any unit from the variable
//---------------------------------------------------------

@function remove-unit($_value) {
	
	@return $_value / ($_value * 0 + 1);
	
}



//---------------------------------------------------------
// Add unit to variable
//---------------------------------------------------------

@function add-unit($_value, $_unit) {
	
	@return unquote(remove-unit($_value) + $_unit);
	
}



//---------------------------------------------------------------
// Converts a pixel value into a root em based value
//---------------------------------------------------------------

@function px-to-rem($_value) {
	
	@return (remove-unit($_value) / remove-unit(map-get($font-size, 'base'))) * 1rem;
	
}



//---------------------------------------------------------------
// Shorthand to get font size
//---------------------------------------------------------------

@function get-font-size($_value) {

	@if str-slice($_value, 1, 1) == '-' and index(map-keys($font-size), str-slice($_value, 2)) {

		@return map-get($font-size, str-slice($_value, 2)) * -1;

	} @else {

		@return map-get($font-size, $_value);

	}
	
}



//---------------------------------------------------------------
// Shorthand to get font weight
//---------------------------------------------------------------

@function get-font-weight($_value) {
	
	@return map-get($font-weight, $_value);
	
}



//---------------------------------------------------------------
// Shorthand to get line height
//---------------------------------------------------------------

@function get-line-height($_value) {
	
	@return map-get($line-height, $_value);
	
}



//---------------------------------------------------------------
// Shorthand to get color
//---------------------------------------------------------------

@function get-color($_value) {
	
	@return map-get($colors, $_value);
	
}



//---------------------------------------------------------------
// Shorthand to get transition speed
//---------------------------------------------------------------

@function get-transition-speed($_value) {
	
	@if str-slice($_value, 1, 1) == '-' and index(map-keys($transition-speed), str-slice($_value, 2)) {
			
		@return map-get($transition-speed, str-slice($_value, 2)) * -1;
	
	} @else {
		
		@return map-get($transition-speed, $_value);
		
	}
	
}



//---------------------------------------------------------------
// Shorthand to get spacing unit
//---------------------------------------------------------------

@function get-spacing($_value) {
	
	@if str-slice($_value, 1, 1) == '-' and index(map-keys($spacing), str-slice($_value, 2)) {
			
		@return map-get($spacing, str-slice($_value, 2)) * -1;
	
	} @else {
		
		@return map-get($spacing, $_value);
		
	}
	
}



//---------------------------------------------------------------
// Explode a string, cause we can
//---------------------------------------------------------------
@function explode($string, $dem) {
	
	$list: ();
	$sum: str-length($string);
	
	@for $i from 1 through $sum {
		$str: str-index($string, $dem);
	
		@if str-length($string) >= 1 and $str == null {
			$list: append($list, $string);
			$string: '';
		}
		
		@if type-of($str) == number {
			$each: str-slice($string, 0, ($str - 1));
			$list: append($list, $each);
			$string: str-slice($string, ($str + 1), $sum);
		}
	}
	
	@return $list;
    
}



//---------------------------------------------------------------
// Length
//---------------------------------------------------------------

@function unit-length($number, $unit) {
	$strings: 'px' 'cm' 'mm' '%' 'ch' 'pica' 'in' 'em' 'rem' 'pt' 'pc' 'ex' 'vw' 'vh' 'vmin' 'vmax';
	$units: 1px  1cm  1mm  1%  1ch  1pica  1in  1em  1rem  1pt  1pc  1ex  1vw  1vh  1vmin  1vmax;
	$index: index($strings, $unit);
	
	@if not $index {
		@warn unquote('Unknown unit #{$unit}.');
		@return false;
	}
	
	@return $number * nth($units, $index);
}



//---------------------------------------------------------------
// Number
//---------------------------------------------------------------

@function number($string) {
	// Matrices
	$strings: '0' '1' '2' '3' '4' '5' '6' '7' '8' '9';
	$numbers:  0   1   2   3   4   5   6   7   8   9;
	
	// Result
	$result: 0;
	$divider: 0;
	$minus: false;
	
	// Looping through all characters
	@for $i from 1 through str-length($string) {
		$character: str-slice($string, $i, $i);
		$index: index($strings, $character);
		
		@if $character == '-' {
			$minus: true;
		} @else if $character == '.' {
			$divider: 1;
		} @else {
			@if not $index {
				$result: if($minus, $result * -1, $result);
				@return unit-length($result, str-slice($string, $i));
			}
			
			$number: nth($numbers, $index);
			
			@if $divider == 0 {
				$result: $result * 10;
			} @else {
				// Move the decimal dot to the left
				$divider: $divider * 10;
				$number: $number / $divider;
			}
		
			$result: $result + $number;
		}
	}
	
	@return if($minus, $result * -1, $result);
}



//---------------------------------------------------------------
// Reverse the order of a list
//---------------------------------------------------------------

@function list-reverse($_list) {
	
	$_result: null;
	
	@if type-of($_list) == 'list' {
		$_list-reversed: ();
		
		@for $i from length($_list) through 1 {
			$_list-reversed: append(
				$_list-reversed, 
				nth($_list, $i)
			);
		}
		
		@if type-of($_list-reversed) == 'list' {
			$_result: $_list-reversed;
		} @else {
			@warn unquote('There was an error reversing the order of #{$_list}');
		}
	} @else {
		@warn unquote('#{$_list} is not a valid list');
	}
	
	@return $_result;
	
}



//---------------------------------------------------------------
// Reverse the order of a map
//---------------------------------------------------------------

@function map-reverse($_map) {
	
	$_result: null;

	@if type-of($_map) == 'map' {
		$keys: map-keys($_map);
		$_map-reversed: ();
		
		@for $i from length($keys) through 1 {
			$_map-reversed: map-merge(
				$_map-reversed,
				(nth($keys, $i): map-get($_map, nth($keys, $i)))
			);
		}

		@if type-of($_map-reversed) == 'map' {
			$_result: $_map-reversed;
		} @else {
			@warn unquote('There was an error reversing the order of #{$_map}');
		}
	} @else {
		@warn unquote('#{$_map} is not a valid map');
	}

	@return $_result;
	
}


//---------------------------------------------------------------
// Check if word (or list) contains value
//---------------------------------------------------------------
@function contain($list, $value) {
	
	@return not not index($list, $value);
	
}



//---------------------------------------------------------------
// Capitalize a string
//---------------------------------------------------------------
@function capitalize($string) {
	
	@return to-upper-case(str-slice($string, 1, 1)) + str-slice($string, 2);
	
}



//---------------------------------------------------------------
// Convert string to camel-case
//---------------------------------------------------------------

@function camelize($_string) {
	
	$_progress: $_string;
	$_result: '';
	$_exclude: ' ', '-', '–', '—', '_', ',', ';', ':', '.';
	
	@if (str-length($_progress) > 2) {
		
		$_result: str-slice($_progress, 1, 1);
		$_progress: str-slice($_progress, 2);
		
		@while str-length($_progress) > 0  {
			$_char: str-slice($_progress, 1, 1);
			
			@if contain($_exclude, $_char) {
				$_progress: capitalize(str-slice($_progress, 2, 2)) + str-slice($_progress, 3);
			} @else {
				$_result: $_result + $_char;
				$_progress: str-slice($_progress, 2);
			}
		}
		
	} @else {
		
		$_result: $_progress;
		
	}
	
	@return $_result;
	
}
