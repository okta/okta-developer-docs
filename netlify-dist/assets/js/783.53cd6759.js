(window.webpackJsonp=window.webpackJsonp||[]).push([[783],{528:function(t,s,e){"use strict";e.r(s);var a=e(8),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("This section discusses the steps to create a Groups claim for an OpenID Connect client application. This approach is recommended if you are using only Okta-mastered Groups. For an Okta Org Authorization Server, you can only create an ID token with a Groups claim, not an access token. See "),e("router-link",{attrs:{to:"/docs/guides/customize-authz-server/overview/"}},[t._v("Authorization Servers")]),t._v(" for more information on the types of authorization servers available to you and what you can use them for.")],1),t._v(" "),e("blockquote",[e("p",[e("strong",[t._v("Note:")]),t._v(" This step requires the Admin Console. If you are using the Developer Console, click the drop-down list in the upper-left corner of the page and select "),e("strong",[t._v("Classic UI")]),t._v(" to switch.")])]),t._v(" "),e("ol",[e("li",[t._v("From the "),e("strong",[t._v("Applications")]),t._v(" menu, select "),e("strong",[t._v("Applications")]),t._v(", and then select the OpenID Connect client application that you want to configure.")]),t._v(" "),e("li",[t._v("Navigate to the "),e("strong",[t._v("Sign On")]),t._v(" tab and click "),e("strong",[t._v("Edit")]),t._v(" in the "),e("strong",[t._v("OpenID Connect ID Token")]),t._v(" section.")]),t._v(" "),e("li",[t._v("In the "),e("strong",[t._v("Groups claim type")]),t._v(" section, you can select either "),e("strong",[t._v("Filter")]),t._v(" or "),e("strong",[t._v("Expression")]),t._v(". For this example, leave "),e("strong",[t._v("Filter")]),t._v(" selected.")]),t._v(" "),e("li",[t._v("In the "),e("strong",[t._v("Group claims filter")]),t._v(" section, leave the default name "),e("code",[t._v("groups")]),t._v(" (or add it if the box is empty), and then add the appropriate filter. For this example, select "),e("strong",[t._v("Matches regex")]),t._v(" and enter "),e("code",[t._v(".*")]),t._v(" to return all of the user's Groups. See "),e("router-link",{attrs:{to:"/docs/reference/okta-expression-language/#group-functions"}},[t._v("Okta Expression Language Group Functions")]),t._v(" for more information on expressions.")],1),t._v(" "),e("li",[t._v("Click "),e("strong",[t._v("Save")]),t._v(".")])]),t._v(" "),e("h3",{attrs:{id:"request-an-id-token-that-contains-the-groups-claim"}},[t._v("Request an ID token that contains the Groups claim "),e("a",{staticClass:"header-anchor header-link",attrs:{href:"#request-an-id-token-that-contains-the-groups-claim","aria-hidden":"true"}},[e("i",{staticClass:"fa fa-link"})])]),t._v(" "),e("p",[t._v("To test the full authentication flow that returns an ID token, build your request URL. For the specific steps on building the request URL, receiving the response, and decoding the JWT, see "),e("GuideLink",{attrs:{link:"../request-token-claim"}},[t._v("Request a token that contains the claim")]),t._v(".")],1),t._v(" "),e("blockquote",[e("p",[e("strong",[t._v("Note:")]),t._v(" The scopes that you need to include as query parameters are "),e("code",[t._v("openid")]),t._v(" and "),e("code",[t._v("groups")]),t._v(".")])]),t._v(" "),e("p",[t._v("The resulting URL looks something like this:")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -X GET\n"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://'),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${yourOktaDomain}")]),t._v("/oauth2/v1/authorize?client_id=examplefa39J4jXdcCwWA\n&response_type=id_token\n&scope=openid%20groups\n&redirect_uri=https%3A%2F%2FyourRedirectUriHere.com\n&state=myState\n&nonce="),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${myNonceValue}")]),t._v('"')]),t._v("\n")])])]),e("p",[t._v("The decoded JWT looks something like this:")]),t._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"sub"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"00uixa271s6x7qt8I0h7"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"ver"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"iss"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://${yourOktaDomain}"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"aud"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0oaoiuhhch8VRtBnC0h7"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"iat"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1574201516")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"exp"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1574205116")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"jti"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ID.ewMNfSvcpuqyS93OgVeCN3F2LseqROkyYjz7DNb9yhs"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"amr"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pwd"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mfa"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"kba"')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"idp"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"00oixa26ycdNcX0VT0h7"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"nonce"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"UBGW"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"auth_time"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1574201433")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"groups"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Everyone"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"IT"')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("NextSectionLink")],1)}),[],!1,null,null,null);s.default=n.exports}}]);