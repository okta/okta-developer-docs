(window.webpackJsonp=window.webpackJsonp||[]).push([[802],{547:function(e,t,o){"use strict";o.r(t);var a=o(8),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("p",[e._v("If you are building a native application, then the authorization code flow with a Proof Key for Code Exchange (PKCE) is the recommended method for controlling the access between your application and a resource server.")]),e._v(" "),o("p",[e._v("The Authorization Code Flow with PKCE is the standard Code flow with an extra step at the beginning and an extra verification at the end. At a high-level, the flow has the following steps:")]),e._v(" "),o("ul",[o("li",[e._v("Your application generates a code verifier followed by a code challenge.")]),e._v(" "),o("li",[e._v("Your application directs the browser to the Okta Sign-In page, along with the generated code challenge, and the user authenticates.")]),e._v(" "),o("li",[e._v("Okta redirects back to your native application with an authorization code.")]),e._v(" "),o("li",[e._v("Your application sends this code, along with the code verifier, to Okta. Okta returns access and ID tokens, and optionally a refresh token.")]),e._v(" "),o("li",[e._v("Your application can now use these tokens to call the resource server (for example an API) on behalf of the user.")])]),e._v(" "),o("p",[e._v("For more information on the authorization code with PKCE flow, including why to use it, see our "),o("router-link",{attrs:{to:"/docs/concepts/auth-overview/#authorization-code-with-pkce-flow"}},[e._v("OAuth 2.0 Overview")]),e._v(".")],1),e._v(" "),o("NextSectionLink")],1)}),[],!1,null,null,null);t.default=n.exports}}]);